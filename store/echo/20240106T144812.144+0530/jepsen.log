2024-01-06 14:48:12,175{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w echo --bin ./challange_2.py --time-limit 30 --rate 1000 --node-count 3 --availability total --nemesis partition
2024-01-06 14:48:12,215{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count 3
 :availability :total
 :max-txn-length 4
 :concurrency 3
 :db
 #object[maelstrom.db$db$reify__16142
         "0x4867e76b"
         "maelstrom.db$db$reify__16142@4867e76b"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "echo"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x4b48be5c" "2024-01-06T14:48:12.144+05:30"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15251
         "0x3fe8d57a"
         "maelstrom.net$jepsen_net$reify__15251@3fe8d57a"]
 :client
 #object[maelstrom.workload.echo$client$reify__16863
         "0x36573ec5"
         "maelstrom.workload.echo$client$reify__16863@36573ec5"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x10c26161"
         "java.util.concurrent.CyclicBarrier@10c26161"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 1000.0
 :checker
 #object[jepsen.checker$compose$reify__11881
         "0x1ef6977b"
         "jepsen.checker$compose$reify__11881@1ef6977b"]
 :argv
 ("test"
  "-w"
  "echo"
  "--bin"
  "./challange_2.py"
  "--time-limit"
  "30"
  "--rate"
  "1000"
  "--node-count"
  "3"
  "--availability"
  "total"
  "--nemesis"
  "partition")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16416@674cd2da"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16397@686279e0"]})
 :nodes ["n0" "n1" "n2"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "./challange_2.py"
 :generator
 (jepsen.generator.TimeLimit
  {:limit 30000000000,
   :cutoff nil,
   :gen (jepsen.generator.Any
         {:gens [(jepsen.generator.OnThreads
                  {:f #{:nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                           "0x60a3a0fa"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__9167@60a3a0fa"],
                   :gen (jepsen.generator.Stagger
                         {:dt 20000000000,
                          :next-time nil,
                          :gen (jepsen.generator.FlipFlop
                                {:gens [#object[jepsen.nemesis.combined$partition_package$start__16420
                                                "0x17734113"
                                                "jepsen.nemesis.combined$partition_package$start__16420@17734113"]
                                        ({:type :info,
                                          :f :stop-partition,
                                          :value nil}
                                         {:type :info,
                                          :f :stop-partition,
                                          :value nil}
                                         {:type :info,
                                          :f :stop-partition,
                                          :value nil}
                                         {:type :info,
                                          :f :stop-partition,
                                          :value nil}
                                         {:type :info,
                                          :f :stop-partition,
                                          :value nil}
                                         {:type :info,
                                          :f :stop-partition,
                                          :value nil}
                                         {:type :info,
                                          :f :stop-partition,
                                          :value nil}
                                         {:type :info,
                                          :f :stop-partition,
                                          :value nil}
                                         ...)],
                                 :i 0})})})
                 (jepsen.generator.OnThreads
                  {:f #jepsen.generator.context.AllBut{:element :nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                           "0xd15f98a"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__9167@d15f98a"],
                   :gen (jepsen.generator.Stagger
                         {:dt 2000000,
                          :next-time nil,
                          :gen (jepsen.generator.EachThread
                                {:fresh-gen #object[maelstrom.workload.echo$workload$fn__16882
                                                    "0x704c3ca2"
                                                    "maelstrom.workload.echo$workload$fn__16882@704c3ca2"],
                                 :context-filters #object[clojure.core$promise$reify__8591
                                                          "0x7d3a9061"
                                                          {:status :pending,
                                                           :val nil}],
                                 :gens {}})})})]})})
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15254
         "0x2a2f7a61"
         "maelstrom.net$jepsen_os$reify__15254@2a2f7a61"]
 :time-limit 30
 :workload :echo
 :consistency-models [:strict-serializable]
 :topology :grid}

2024-01-06 14:48:13,057{GMT}	INFO	[jepsen node n0] maelstrom.net: Starting Maelstrom network
2024-01-06 14:48:13,057{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2024-01-06 14:48:13,058{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2024-01-06 14:48:13,058{GMT}	INFO	[jepsen node n1] maelstrom.db: Setting up n1
2024-01-06 14:48:13,058{GMT}	INFO	[jepsen node n2] maelstrom.db: Setting up n2
2024-01-06 14:48:13,059{GMT}	INFO	[jepsen node n1] maelstrom.process: launching ./challange_2.py []
2024-01-06 14:48:13,059{GMT}	INFO	[jepsen node n2] maelstrom.process: launching ./challange_2.py []
2024-01-06 14:48:13,059{GMT}	INFO	[jepsen node n0] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2024-01-06 14:48:13,060{GMT}	INFO	[jepsen node n0] maelstrom.db: Setting up n0
2024-01-06 14:48:13,060{GMT}	INFO	[jepsen node n0] maelstrom.process: launching ./challange_2.py []
2024-01-06 14:48:13,179{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2024-01-06 14:48:13,187{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:invoke	:echo	"Please echo 33"
2024-01-06 14:48:13,187{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:start-partition	:majorities-ring
2024-01-06 14:48:13,187{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 61"
2024-01-06 14:48:13,188{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:invoke	:echo	"Please echo 8"
2024-01-06 14:48:13,189{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:start-partition	[:isolated {"n0" #{"n1"}, "n1" #{"n2"}, "n2" #{"n0"}}]
2024-01-06 14:48:18,197{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:info	:echo	"Please echo 61"	:net-timeout
2024-01-06 14:48:18,197{GMT}	INFO	[jepsen worker 2] jepsen.util: 2	:info	:echo	"Please echo 33"	:net-timeout
2024-01-06 14:48:18,197{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:info	:echo	"Please echo 8"	:net-timeout
2024-01-06 14:48:18,200{GMT}	INFO	[jepsen worker 1] jepsen.util: 4	:invoke	:echo	"Please echo 108"
2024-01-06 14:48:18,200{GMT}	INFO	[jepsen worker 2] jepsen.util: 5	:invoke	:echo	"Please echo 33"
2024-01-06 14:48:18,201{GMT}	INFO	[jepsen worker 0] jepsen.util: 3	:invoke	:echo	"Please echo 80"
2024-01-06 14:48:23,208{GMT}	INFO	[jepsen worker 1] jepsen.util: 4	:info	:echo	"Please echo 108"	:net-timeout
2024-01-06 14:48:23,210{GMT}	INFO	[jepsen worker 0] jepsen.util: 3	:info	:echo	"Please echo 80"	:net-timeout
2024-01-06 14:48:23,210{GMT}	INFO	[jepsen worker 2] jepsen.util: 5	:info	:echo	"Please echo 33"	:net-timeout
2024-01-06 14:48:23,210{GMT}	INFO	[jepsen worker 2] jepsen.util: 8	:invoke	:echo	"Please echo 10"
2024-01-06 14:48:23,211{GMT}	INFO	[jepsen worker 0] jepsen.util: 6	:invoke	:echo	"Please echo 68"
2024-01-06 14:48:23,212{GMT}	INFO	[jepsen worker 1] jepsen.util: 7	:invoke	:echo	"Please echo 60"
2024-01-06 14:48:28,217{GMT}	INFO	[jepsen worker 2] jepsen.util: 8	:info	:echo	"Please echo 10"	:net-timeout
2024-01-06 14:48:28,218{GMT}	INFO	[jepsen worker 0] jepsen.util: 6	:info	:echo	"Please echo 68"	:net-timeout
2024-01-06 14:48:28,219{GMT}	INFO	[jepsen worker 1] jepsen.util: 7	:info	:echo	"Please echo 60"	:net-timeout
2024-01-06 14:48:28,219{GMT}	INFO	[jepsen worker 0] jepsen.util: 9	:invoke	:echo	"Please echo 33"
2024-01-06 14:48:28,221{GMT}	INFO	[jepsen worker 1] jepsen.util: 10	:invoke	:echo	"Please echo 117"
2024-01-06 14:48:28,223{GMT}	INFO	[jepsen worker 2] jepsen.util: 11	:invoke	:echo	"Please echo 46"
2024-01-06 14:48:31,865{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:stop-partition	nil
2024-01-06 14:48:31,867{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:stop-partition	:network-healed
2024-01-06 14:48:33,226{GMT}	INFO	[jepsen worker 0] jepsen.util: 9	:info	:echo	"Please echo 33"	:net-timeout
2024-01-06 14:48:33,228{GMT}	INFO	[jepsen worker 1] jepsen.util: 10	:info	:echo	"Please echo 117"	:net-timeout
2024-01-06 14:48:33,229{GMT}	INFO	[jepsen worker 1] jepsen.util: 13	:invoke	:echo	"Please echo 92"
2024-01-06 14:48:33,231{GMT}	INFO	[jepsen worker 0] jepsen.util: 12	:invoke	:echo	"Please echo 45"
2024-01-06 14:48:33,231{GMT}	INFO	[jepsen worker 2] jepsen.util: 11	:info	:echo	"Please echo 46"	:net-timeout
2024-01-06 14:48:33,232{GMT}	INFO	[jepsen worker 2] jepsen.util: 14	:invoke	:echo	"Please echo 75"
2024-01-06 14:48:38,236{GMT}	INFO	[jepsen worker 1] jepsen.util: 13	:info	:echo	"Please echo 92"	:net-timeout
2024-01-06 14:48:38,238{GMT}	INFO	[jepsen worker 2] jepsen.util: 14	:info	:echo	"Please echo 75"	:net-timeout
2024-01-06 14:48:38,236{GMT}	INFO	[jepsen worker 0] jepsen.util: 12	:info	:echo	"Please echo 45"	:net-timeout
2024-01-06 14:48:38,239{GMT}	INFO	[jepsen worker 1] jepsen.util: 16	:invoke	:echo	"Please echo 86"
2024-01-06 14:48:38,240{GMT}	INFO	[jepsen worker 2] jepsen.util: 17	:invoke	:echo	"Please echo 115"
2024-01-06 14:48:38,240{GMT}	INFO	[jepsen worker 0] jepsen.util: 15	:invoke	:echo	"Please echo 41"
2024-01-06 14:48:41,306{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:start-partition	:majority
2024-01-06 14:48:41,308{GMT}	INFO	[jepsen worker nemesis] jepsen.util: :nemesis	:info	:start-partition	[:isolated {"n1" #{"n2" "n0"}, "n2" #{"n1"}, "n0" #{"n1"}}]
2024-01-06 14:48:43,246{GMT}	INFO	[jepsen worker 2] jepsen.util: 17	:info	:echo	"Please echo 115"	:net-timeout
2024-01-06 14:48:43,247{GMT}	INFO	[jepsen worker 1] jepsen.util: 16	:info	:echo	"Please echo 86"	:net-timeout
2024-01-06 14:48:43,246{GMT}	INFO	[jepsen worker 0] jepsen.util: 15	:info	:echo	"Please echo 41"	:net-timeout
2024-01-06 14:48:43,270{GMT}	INFO	[jepsen test runner] jepsen.core: Run complete, writing
2024-01-06 14:48:43,315{GMT}	INFO	[jepsen node n2] maelstrom.db: Tearing down n2
2024-01-06 14:48:43,315{GMT}	INFO	[jepsen node n1] maelstrom.db: Tearing down n1
2024-01-06 14:48:43,315{GMT}	INFO	[jepsen node n0] maelstrom.db: Tearing down n0
2024-01-06 14:48:45,197{GMT}	INFO	[jepsen node n0] maelstrom.net: Shutting down Maelstrom network
2024-01-06 14:48:45,200{GMT}	INFO	[jepsen test runner] jepsen.core: Analyzing...
2024-01-06 14:48:45,414{GMT}	INFO	[jepsen test runner] jepsen.core: Analysis complete
2024-01-06 14:48:45,419{GMT}	INFO	[jepsen results] jepsen.store: Wrote /Users/pankaj.negi/Desktop/repos/maelstrom-problems/store/echo/20240106T144812.144+0530/results.edn
2024-01-06 14:48:45,439{GMT}	INFO	[jepsen test runner] jepsen.core: {:perf {:latency-graph {:valid? true},
        :rate-graph {:valid? true},
        :valid? true},
 :timeline {:valid? true},
 :exceptions {:valid? true},
 :stats {:valid? false,
         :count 18,
         :ok-count 0,
         :fail-count 0,
         :info-count 18,
         :by-f {:echo {:valid? false,
                       :count 18,
                       :ok-count 0,
                       :fail-count 0,
                       :info-count 18}}},
 :availability {:valid? false, :ok-fraction 0.0},
 :net {:all {:send-count 42,
             :recv-count 42,
             :msg-count 42,
             :msgs-per-op 2.3333333},
       :clients {:send-count 24, :recv-count 24, :msg-count 24},
       :servers {:send-count 18,
                 :recv-count 18,
                 :msg-count 18,
                 :msgs-per-op 1.0},
       :valid? true},
 :workload {:valid? true, :errors ()},
 :valid? false}


Analysis invalid! (ﾉಥ益ಥ）ﾉ ┻━┻
